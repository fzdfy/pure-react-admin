/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Example API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TypesLoginResp
 */
export interface TypesLoginResp {
    /**
     * 
     * @type {number}
     * @memberof TypesLoginResp
     */
    accessExpire: number;
    /**
     * 
     * @type {string}
     * @memberof TypesLoginResp
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof TypesLoginResp
     */
    currentAuthority: string;
    /**
     * 
     * @type {number}
     * @memberof TypesLoginResp
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof TypesLoginResp
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof TypesLoginResp
     */
    refreshAfter: number;
    /**
     * 
     * @type {string}
     * @memberof TypesLoginResp
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof TypesLoginResp
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof TypesLoginResp
     */
    userName: string;
}

/**
 * Check if a given object implements the TypesLoginResp interface.
 */
export function instanceOfTypesLoginResp(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessExpire" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "currentAuthority" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "refreshAfter" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "userName" in value;

    return isInstance;
}

export function TypesLoginRespFromJSON(json: any): TypesLoginResp {
    return TypesLoginRespFromJSONTyped(json, false);
}

export function TypesLoginRespFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypesLoginResp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessExpire': json['accessExpire'],
        'code': json['code'],
        'currentAuthority': json['currentAuthority'],
        'id': json['id'],
        'message': json['message'],
        'refreshAfter': json['refreshAfter'],
        'status': json['status'],
        'token': json['token'],
        'userName': json['userName'],
    };
}

export function TypesLoginRespToJSON(value?: TypesLoginResp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessExpire': value.accessExpire,
        'code': value.code,
        'currentAuthority': value.currentAuthority,
        'id': value.id,
        'message': value.message,
        'refreshAfter': value.refreshAfter,
        'status': value.status,
        'token': value.token,
        'userName': value.userName,
    };
}

